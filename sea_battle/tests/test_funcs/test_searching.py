from django.test import TestCase
from sea_battle.funcs.searching import (get_ship_perimeter,
                                        find_ships,
                                        find_ships_in_column,
                                        find_ships_in_row, )


class SeaBattleSearchingFuncsTestCase(TestCase):
    def test_find_ships_in_row(self):
        """Проверка корректности поиска короблей с горизонтальной ориентацией."""
        ship_field = [
            [1, 1, 1, 0, 1, 1, 0, 1, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],
            [1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
            [1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 1, 1, 1],
            [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 0, 1, 1, 0, 1, 1],
        ]
        expected_ships = [
            [[0, 0], [0, 1], [0, 2]], [[0, 4], [0, 5]], [[0, 7], [0, 8], [0, 9]],
            [[5, 7], [5, 8], [5, 9]], [[6, 0], [6, 1]], [[7, 4], [7, 5]],
            [[9, 0], [9, 1], [9, 2], [9, 3]], [[9, 5], [9, 6]], [[9, 8], [9, 9]],
        ]
        received_ships = find_ships_in_row(ship_field)
        self.assertEqual(received_ships, expected_ships)

    def test_find_ships_in_column(self):
        """Проверка корректности поиска короблей с вертикальной ориентацией."""
        ship_field = [
            [1, 0, 1, 1, 1, 0, 1, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
            [1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [1, 0, 1, 1, 0, 0, 0, 1, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [1, 0, 1, 1, 0, 1, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
        ]
        expected_ships = [
            [[0, 0], [1, 0], [2, 0]], [[4, 0], [5, 0]], [[7, 0], [8, 0], [9, 0]],
            [[7, 5], [8, 5], [9, 5]], [[0, 6], [1, 6]], [[4, 7], [5, 7]],
            [[0, 9], [1, 9], [2, 9], [3, 9]], [[5, 9], [6, 9]], [[8, 9], [9, 9]],
        ]
        received_ships = find_ships_in_column(ship_field)
        self.assertEqual(received_ships, expected_ships)

    def test_find_ships(self):
        """Проверка корректности поиска короблей."""
        ship_field = [
            [1, 1, 0, 1, 1, 0, 1, 0, 1, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
            [1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 1, 0, 1, 1, 1, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
            [1, 0, 1, 0, 1, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 1, 0, 1, 1, 0, 1],
        ]
        expected_ships = [
            [[2, 0], [3, 0], [4, 0]], [[8, 0], [9, 0]], [[2, 2], [3, 2], [4, 2]],
            [[7, 4], [8, 4], [9, 4]], [[0, 6], [1, 6], [2, 6]], [[4, 9], [5, 9]],
            [[7, 9], [8, 9], [9, 9]], [[0, 0], [0, 1]], [[0, 3], [0, 4]],
            [[0, 8], [0, 9]], [[2, 8], [2, 9]], [[4, 4], [4, 5], [4, 6]],
            [[6, 0], [6, 1], [6, 2]], [[9, 6], [9, 7]], [[2, 4]], [[6, 6]], [[8, 2]],
        ]
        received_ships = find_ships(ship_field)
        self.assertEqual(received_ships, expected_ships)

    def test_find_ships_with_option(self):
        """Проверка корректности поиска короблей с доп. статусами (ранен/убит)."""
        ship_field = [
            [0, 0, 0, 0, 4, 0, 0, 1, 0, 0],
            [0, 0, 1, 0, 4, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 4, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 1, 1, 1, 1, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 3, 3, 3, 0],
        ]
        received_ships = find_ships(ship_field, level=3)
        expected_ships = [[[9, 6], [9, 7], [9, 8]]]
        self.assertEqual(received_ships, expected_ships)
        received_ships = find_ships(ship_field, level=4)
        expected_ships = [[[0, 4], [1, 4], [2, 4]]]
        self.assertEqual(received_ships, expected_ships)

    def test_get_ship_perimeter_for_big_ships(self):
        """Проверка корректности определения периметра для больших кораблей."""
        ships = [
            [[0, 0], [1, 0], [2, 0]], [[4, 0], [5, 0], [6, 0]], [[7, 4], [8, 4], [9, 4]],
            [[0, 5], [1, 5], [2, 5]], [[4, 6], [5, 6], [6, 6]], [[3, 9], [4, 9], [5, 9]],
            [[7, 9], [8, 9], [9, 9]], [[0, 7], [0, 8], [0, 9]], [[4, 2], [4, 3], [4, 4]],
            [[9, 0], [9, 1], [9, 2]],
        ]
        expected_perimeters = [
            [[0, 1], [1, 1], [3, 0], [3, 1], [2, 1]],
            [[3, 0], [3, 1], [4, 1], [5, 1], [7, 0], [7, 1], [6, 1]],
            [[6, 3], [6, 4], [6, 5], [7, 5], [7, 3], [8, 5], [8, 3], [9, 5], [9, 3]],
            [[0, 6], [0, 4], [1, 6], [1, 4], [3, 4], [3, 5], [3, 6], [2, 6], [2, 4]],
            [[3, 5], [3, 6], [3, 7], [4, 7], [4, 5], [5, 7], [5, 5], [7, 5], [7, 6], [7, 7], [6, 7], [6, 5]],
            [[2, 8], [2, 9], [3, 8], [4, 8], [6, 8], [6, 9], [5, 8]],
            [[6, 8], [6, 9], [7, 8], [8, 8], [9, 8]],
            [[0, 6], [1, 6], [1, 7], [1, 8], [1, 9]],
            [[3, 1], [4, 1], [5, 1], [5, 2], [3, 2], [5, 3], [3, 3], [3, 5], [4, 5], [5, 5], [5, 4], [3, 4]],
            [[8, 0], [8, 1], [8, 3], [9, 3], [8, 2]],
        ]
        received_perimeters = []
        for ship in ships:
            received_perimeters.append(get_ship_perimeter(ship))
        self.assertEqual(received_perimeters, expected_perimeters)

    def test_get_ship_perimeter_for_small_ships(self):
        """Проверка корректности определения периметра для маленьких кораблей."""
        ships = [[[0, 0]], [[0, 4]], [[0, 9]], [[4, 0]], [[4, 5]], [[4, 9]], [[9, 0]], [[9, 4]], [[9, 9]]]
        expected_perimeters = [
            [[1, 0], [1, 1], [0, 1]], [[1, 3], [1, 4], [1, 5], [0, 5], [0, 3]],
            [[1, 8], [1, 9], [0, 8]], [[3, 0], [3, 1], [5, 0], [5, 1], [4, 1]],
            [[3, 4], [3, 5], [3, 6], [5, 4], [5, 5], [5, 6], [4, 6], [4, 4]],
            [[3, 8], [3, 9], [5, 8], [5, 9], [4, 8]], [[8, 0], [8, 1], [9, 1]],
            [[8, 3], [8, 4], [8, 5], [9, 5], [9, 3]], [[8, 8], [8, 9], [9, 8]],
        ]
        received_perimeters = []
        for ship in ships:
            received_perimeters.append(get_ship_perimeter(ship))
        self.assertEqual(received_perimeters, expected_perimeters)
